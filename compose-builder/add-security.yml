# /*******************************************************************************
#  * Copyright 2024 Intel Corporation.
#  *
#  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
#  * in compliance with the License. You may obtain a copy of the License at
#  *
#  * http://www.apache.org/licenses/LICENSE-2.0
#  *
#  * Unless required by applicable law or agreed to in writing, software distributed under the License
#  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
#  * or implied. See the License for the specific language governing permissions and limitations under
#  * the License.
#  *
#  *******************************************************************************/

version: '3.7'

volumes:
  edgex-init:
  vault-config:
  vault-file:
  vault-logs:
  # non-shared volumes
  redis-config:

services:
  security-bootstrapper:
    image: ${CORE_EDGEX_REPOSITORY}/security-bootstrapper${ARCH}:${CORE_EDGEX_VERSION}
    user: "root:root" # Must run as root
    container_name: edgex-security-bootstrapper
    hostname: edgex-security-bootstrapper
    networks:
      - edgex-network
    read_only: true
    restart: always
    env_file:
      - common-sec-stage-gate.env
    environment:
      EDGEX_USER: ${EDGEX_USER}
      EDGEX_GROUP: ${EDGEX_GROUP}
    volumes:
      # use host timezone
      - /etc/localtime:/etc/localtime:ro
      - edgex-init:/edgex-init
    security_opt:
      - no-new-privileges:true

  database:
    entrypoint: ["/edgex-init/redis_wait_install.sh"]
    env_file:
      - common-security.env
      - common-sec-stage-gate.env
    environment:
      DATABASECONFIG_PATH: /run/redis/conf
      DATABASECONFIG_NAME: redis.conf
    tmpfs:
      - /run
    volumes:
      - edgex-init:/edgex-init:ro
      - redis-config:/run/redis/conf
      - /tmp/edgex/secrets/security-bootstrapper-redis:/tmp/edgex/secrets/security-bootstrapper-redis:ro,z
    depends_on:
      - security-bootstrapper
      - security-secretstore-setup

  security-secretstore-setup:
    image: ${CORE_EDGEX_REPOSITORY}/security-secretstore-setup${ARCH}:${CORE_EDGEX_VERSION}
    user: "root:root" # must run as root
    container_name: edgex-security-secretstore-setup
    hostname: edgex-security-secretstore-setup
    env_file:
      - common-security.env
      - common-sec-stage-gate.env
    environment:
      EDGEX_USER: ${EDGEX_USER}
      EDGEX_GROUP: ${EDGEX_GROUP}
      # Uncomment and modify the following "EDGEX_ADD_SECRETSTORE_TOKENS" to add the additional secret store tokens on the fly
      # the secret store token is required if you have added registry acl roles from env "EDGEX_ADD_REGISTRY_ACL_ROLES"
      # in service "consul".
      #EDGEX_ADD_SECRETSTORE_TOKENS: app-sample,app-rules-engine-redis, app-rules-engine-mqtt, app-push-to-core
    read_only: true
    restart: always
    networks:
      - edgex-network
    tmpfs:
      - /run
      - /vault
    volumes:
      # use host timezone
      - /etc/localtime:/etc/localtime:ro
      - edgex-init:/edgex-init:ro
      - vault-config:/vault/config
      - /tmp/edgex/secrets:/tmp/edgex/secrets:z
    depends_on:
      - security-bootstrapper
      - vault
    security_opt:
      - no-new-privileges:true

  vault:
    image: hashicorp/vault:${VAULT_VERSION}
    user: "root:root" # Note that Vault is run under the 'vault' user, but entry point scripts need to first run as root
    container_name: edgex-vault
    hostname: edgex-vault
    networks:
      - edgex-network
    ports:
      - "127.0.0.1:8200:8200"
    deploy:
      resources:
        limits:
          memory: "1024m"
    memswap_limit: "1024m"
    tmpfs:
      - /vault/config
    entrypoint: [ "/edgex-init/vault_wait_install.sh" ]
    env_file:
      - common-sec-stage-gate.env
    command: server
    environment:
      VAULT_ADDR: http://edgex-vault:8200
      VAULT_CONFIG_DIR: /vault/config
      VAULT_UI: "true"
      VAULT_LOCAL_CONFIG: >
        listener "tcp" { 
            address = "edgex-vault:8200" 
            tls_disable = "1" 
            cluster_address = "edgex-vault:8201" 
        }
        backend "file" {
            path = "/vault/file"
        }
        default_lease_ttl = "168h" 
        max_lease_ttl = "720h"
        disable_mlock = true
    volumes:
      - edgex-init:/edgex-init:ro
      - vault-file:/vault/file
      - vault-logs:/vault/logs
    depends_on:
      - security-bootstrapper
    restart: always

  support-notifications:
    env_file:
      - common-security.env
      - common-sec-stage-gate.env
    entrypoint: ["/edgex-init/ready_to_run_wait_install.sh"]
    command: "/support-notifications --registry ${CP_FLAGS}"
    volumes:
      - edgex-init:/edgex-init:ro
      - /tmp/edgex/secrets/support-notifications:/tmp/edgex/secrets/support-notifications:ro,z
    depends_on:
      - security-bootstrapper
      - security-secretstore-setup
      - database

  core-metadata:
    env_file:
      - common-security.env
      - common-sec-stage-gate.env
    entrypoint: ["/edgex-init/ready_to_run_wait_install.sh"]
    command: "/core-metadata --registry ${CP_FLAGS}"
    volumes:
      - edgex-init:/edgex-init:ro
      - /tmp/edgex/secrets/core-metadata:/tmp/edgex/secrets/core-metadata:ro,z
    depends_on:
      - security-bootstrapper
      - security-secretstore-setup
      - database

  core-data:
    env_file:
      - common-security.env
      - common-sec-stage-gate.env
    entrypoint: ["/edgex-init/ready_to_run_wait_install.sh"]
    command: "/core-data --registry ${CP_FLAGS}"
    volumes:
      - edgex-init:/edgex-init:ro
      - /tmp/edgex/secrets/core-data:/tmp/edgex/secrets/core-data:ro,z
    depends_on:
      - security-bootstrapper
      - security-secretstore-setup
      - database

  core-command:
    env_file:
      - common-security.env
      - common-sec-stage-gate.env
    entrypoint: ["/edgex-init/ready_to_run_wait_install.sh"]
    command: "/core-command --registry ${CP_FLAGS}"
    volumes:
      - edgex-init:/edgex-init:ro
      - /tmp/edgex/secrets/core-command:/tmp/edgex/secrets/core-command:ro,z
    depends_on:
      - security-bootstrapper
      - security-secretstore-setup
      - database

  core-common-config-bootstrapper:
    env_file:
      - common-security.env
      - common-sec-stage-gate.env
    entrypoint: ["/edgex-init/ready_to_run_wait_install.sh"]
    command: /entrypoint.sh /core-common-config-bootstrapper --registry ${CP_FLAGS}
    volumes:
      - edgex-init:/edgex-init:ro
      - /tmp/edgex/secrets/core-common-config-bootstrapper:/tmp/edgex/secrets/core-common-config-bootstrapper:ro,z
    depends_on:
      - security-bootstrapper
      - security-secretstore-setup

  support-scheduler:
    env_file:
      - common-security.env
      - common-sec-stage-gate.env
    entrypoint: ["/edgex-init/ready_to_run_wait_install.sh"]
    command: "/support-scheduler --registry ${CP_FLAGS}"
    volumes:
      - edgex-init:/edgex-init:ro
      - /tmp/edgex/secrets/support-scheduler:/tmp/edgex/secrets/support-scheduler:ro,z
    depends_on:
      - security-bootstrapper
      - security-secretstore-setup
      - database

  # this is to make sure the service is started after security-bootstrapper process is done
  # because it needs to await Consul roles to be created
  app-rules-engine:
    entrypoint: ["/edgex-init/ready_to_run_wait_install.sh"]
    command: "/app-service-configurable --registry ${CP_FLAGS}"
    env_file:
      - common-security.env
      - common-sec-stage-gate.env
    volumes:
      - edgex-init:/edgex-init:ro
      - /tmp/edgex/secrets/app-rules-engine:/tmp/edgex/secrets/app-rules-engine:ro,z
    depends_on:
      - security-bootstrapper

  ui:
    environment:
      EDGEX_SECURITY_SECRET_STORE: "true"
